- alias: Solar - Battery Charge Automation
  description: Main automatic battery charging function
  trigger:
    - platform: time
      at: "23:55:00"
  condition: []
  action:
    - service: input_number.set_value
      data:
        value: "{{ states('sensor.house_load_today') }}"
      target:
        entity_id: input_number.expected_consumption
  mode: single

- alias: "Solar - Daily Sync RTC "
  description: Synchronises the Inverter clock with HA once per day
  trigger:
    - platform: time
      at: "22:05:00"
  condition: []
  action:
    - service: button.press
      data: {}
      target:
        entity_id: button.solax_sync_rtc
  mode: single

- alias: Solar - Expected Consumption Low State Tracker
  description: >-
    If the number input number 'Expected Consumption' is overtaken by the Solis
    sensor 'Solax House Load Today', the value from the sensor is set to the
    number input to avoid peculiarities in battery SoC forecasting.
  trigger:
    - platform: state
      entity_id:
        - sensor.house_load_today
  condition:
    - condition: numeric_state
      entity_id: sensor.house_load_today
      above: input_number.expected_consumption
  action:
    - service: input_number.set_value
      data:
        value: "{{ states('sensor.house_load_today') }}"
      target:
        entity_id: input_number.expected_consumption
  mode: single

- alias: "Solar - Expected Consumption Today : Updater"
  description: >-
    Updates todays expected consumption every hour after midday by dividing house
    load today by the hour and then multiplying by 24
  trigger:
    - platform: time_pattern
      minutes: "1"
  condition:
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
      after: "12:00:00"
      before: "23:02:00"
  action:
    - service: input_number.set_value
      data:
        value: "{{ states('sensor.house_load_today_forecast') }}"
      target:
        entity_id: input_number.expected_consumption
  mode: single

- alias: Solar - Restore Consumption Defaults
  description: >-
    Sets todays expected consumption and tomorrows expected consumption to 10,
    Target SoC to 4.5, base load to 0.24, and boost charge to 0
  trigger:
    - platform: state
      entity_id:
        - input_button.reset_consumption_defaults
  condition: [ ]
  action:
    - service: input_number.set_value
      data:
        value: 12
      target:
        entity_id: input_number.expected_consumption
    - service: input_number.set_value
      data:
        value: 12
      target:
        entity_id: input_number.expected_consumption_tomorrow
    - service: input_number.set_value
      data:
        value: 4.5
      target:
        entity_id: input_number.target_usable_soc
    - service: input_number.set_value
      data:
        value: 0.24
      target:
        entity_id: input_number.background_load
    - service: input_number.set_value
      data:
        value: 0
      target:
        entity_id: input_number.boost_charge
    - service: number.set_value
      data:
        value: "55"
      target:
        entity_id: number.solax_timed_charge_current
    - service: input_number.set_value
      data:
        value: 10
      target:
        entity_id: input_number.battery_capacity
    - service: input_number.set_value
      data:
        value: 10
      target:
        entity_id: input_number.force_charge_soc
    - service: input_number.set_value
      data:
        value: 15
      target:
        entity_id: input_number.overdischarge_soc
  mode: single

- alias: Solar - Update Times
  description: >-
    Manually updates Inverter Charge and Discharge Times from Solax Modbus
    Integration
  trigger: [ ]
  condition: [ ]
  action:
    - parallel:
        - service: number.set_value
          data:
            value: "{{ states('sensor.soc_charge_end_time_hhmm').split(':')[0] }}"
          target:
            entity_id: number.solax_timed_charge_end_hours
        - service: number.set_value
          data:
            value: "{{ states('sensor.soc_charge_end_time_hhmm').split(':')[1] }}"
          target:
            entity_id: number.solax_timed_charge_end_minutes
    - delay:
        hours: 0
        minutes: 0
        seconds: 5
        milliseconds: 0
    - service: button.press
      data: { }
      target:
        entity_id:
          - button.solax_update_charge_discharge_times
  mode: single

- alias: Solar - Apply Manual Cost Saving Adjustment
  description: ""
  trigger:
    - platform: state
      entity_id:
        - input_button.apply_manual_electricity_cost_saving_adjustment
  condition: []
  action:
    - service: var.set
      data:
        entity_id:
          - var.total_solar_battery_cost_saving
        value: >-
          {{ (states('var.total_solar_battery_cost_saving') | float) +
          (states('input_number.manual_electricity_cost_saving_adjustment')|
          float) }}
    - service: input_number.set_value
      data:
        value: 0
      target:
        entity_id: input_number.manual_electricity_cost_saving_adjustment
  mode: single

- alias: Solar - Check 1AM Charge
  description: >-
    When the battery charge rate is low trigger a charge of 1KW, when not then
    enable self use mode. When adjusting timeing be sure to do in all four places
  trigger:
    - platform: time
      at: "01:01:00"
  condition: []
  action:
    - if:
        - condition: template
          value_template: "{{ ((states('sensor.solax_bms_charge_max_current')| float) > 8) }}"
      then:
        - service: select.select_option
          data:
            option: Enabled Self Use
          target:
            entity_id: select.solax_remotecontrol_power_control
        - service: number.set_value
          data:
            value: >-
              {% set target= (as_timestamp(now().replace(hour=1, minute=57, second
              =0) ) - as_timestamp(now()))|round(1)|int %} {{ ([28800, target] |
              sort)[0] }} # Time place 2/4
          target:
            entity_id: number.solax_remotecontrol_autorepeat_duration
        - service: button.press
          data: {}
          target:
            entity_id: button.solax_remotecontrol_trigger
      else:
        - service: select.select_option
          data:
            option: Enabled Battery Control
          target:
            entity_id: select.solax_remotecontrol_power_control
        - service: number.set_value
          data:
            value: "1000"
          target:
            entity_id: number.solax_remotecontrol_active_power
        - service: number.set_value
          data:
            value: >-
              {% set target= (as_timestamp(now().replace(hour=1, minute=57, second
              =0) ) - as_timestamp(now()))|round(1)|int %} {{ ([28800, target] |
              sort)[0] }} # Time place 3/4
          target:
            entity_id: number.solax_remotecontrol_autorepeat_duration
        - service: button.press
          data: {}
          target:
            entity_id: button.solax_remotecontrol_trigger
    - delay:
        hours: 0
        minutes: 57
        seconds: 0
        milliseconds: 0
    - service: select.select_option
      data:
        option: Disabled
      target:
        entity_id: select.solax_remotecontrol_power_control
    - service: number.set_value
      data:
        value: 0
      target:
        entity_id: number.solax_remotecontrol_autorepeat_duration
    - service: button.press
      data: {}
      target:
        entity_id: button.solax_remotecontrol_trigger
  mode: single
  
- alias: Solar - Overnight Charge Cutout
  description: >-
    Monitors battery SoC when Overnight - Charge automation running.  Stops charge
    when battery reaches % set using mod bus and then uses modbus control to stop
    furhter charging
  trigger:
    - platform: numeric_state
      entity_id: sensor.solax_battery_capacity
      above: sensor.soc_required_charge_plus_boost_percent
  condition:
    - condition: time
      after: "02:00:00"
      before: "05:00:00"
  action:
    - service: number.set_value
      data:
        value: "0"
      target:
        entity_id: number.solax_remotecontrol_active_power
    - service: select.select_option
      data:
        option: Enabled Power Control
      target:
        entity_id: select.solax_remotecontrol_power_control
    - service: number.set_value
      data:
        value: >-
          {{ (as_timestamp(now().replace(hour=5, minute=00, second =00) ) -
          as_timestamp(now()))|round(1)|int }}
      target:
        entity_id: number.solax_remotecontrol_autorepeat_duration
    - service: button.press
      data: {}
      target:
        entity_id: button.solax_remotecontrol_trigger
  mode: single

- alias: Solar - Update total solar battery cost saving
  description: ""
  trigger:
    - platform: time
      at: "23:58:59"
  condition: []
  action:
    - service: var.set
      data:
        entity_id:
          - var.total_solar_battery_cost_saving
        value: >-
          {{ (states('var.total_solar_battery_cost_saving') | float) +
          (states('sensor.today_electricity_cost_saved')| float) }}
  mode: single

- alias: Solar - Saving Session Discharge
  description: ""
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.octopus_energy_a_REPLACE_octoplus_saving_sessions
      to: "on"
  condition: []
  action:
    - service: select.select_option
      data:
        option: Enabled Battery Control
      target:
        entity_id: select.solax_remotecontrol_power_control
    - service: number.set_value
      data:
        value: {{ states('input_number.saving_session_discharge_rate') | float() * -1  }}
      target:
        entity_id: number.solax_remotecontrol_active_power
    - service: number.set_value
      data:
        value:
          "[object Object]": null
      target:
        entity_id: number.solax_remotecontrol_autorepeat_duration
    - service: button.press
      data: {}
      target:
        entity_id: button.solax_remotecontrol_trigger
  mode: single

- alias: Solar - Saving Session Charge
  description: >-
    When a savign session is today, and it was not planned before the current day
    charge until it reaches it set point
  trigger:
    - platform: state
      entity_id:
        - sensor.octopus_energy_saving_session_today
      to: "True"
  condition:
    - condition: time
      after: "05:00:00"
  action:
    - service: select.select_option
      data:
        option: Enabled Battery Control
      target:
        entity_id: select.solax_remotecontrol_power_control
    - service: number.set_value
      data:
        value:
          "[object Object]": null
      target:
        entity_id: number.solax_remotecontrol_active_power
    - service: number.set_value
      data:
        value: >-
          {% set secondsToStart= states('sensor.octopus_energy_saving_session_start_datetime') | as_timestamp() - as_timestamp(now()) |round(1)|int %} 
          {{ ([28800, secondsToStart] | sort)[0] }}
      target:
        entity_id: number.solax_remotecontrol_autorepeat_duration
    - service: button.press
      data: {}
      target:
        entity_id: button.solax_remotecontrol_trigger
  mode: single
